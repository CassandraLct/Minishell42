Reste à faire:
	*signaux: faire ctrl-D, ctrl-c, ctrl-\;
	*les chevrons, pipe, $?;
	*lexer: gerer les cotes;
	*exit $quelque chose , exit normalement, (gerer avec le $)?

/!\ Objectif 8/12 (vendredi):
	-> Finir unset (enlever une variable d'export) : Fait et seg fault regler!
	-> Finir export (changer valeur d'une variable (env, export)) : Fait!
	-> Finir echo (cas -n expres un 1er arg) : Fait!
	-> Faire un coup de norminette : Fait!
	-> Verifier les leaks (leaks ne fonctionne pas avec fsanitize) : 1 leak
	*Si le temps commencer les signaux : Fait
		signaux: https://www-apr.lip6.fr/~chaillou/Public/enseignement/MA1/TD3/node1.html (debut interessant)
				 http://pauillac.inria.fr/~remy/poly/system/camlunix/sign.html (explication du fonctionnement)
				 https://btholt.github.io/complete-intro-to-linux-and-the-cli/signals-and-the-power-of-ctrl
		sigint	Interruption (ctrl-C)
		sigquit	Interruption forte (ctrl-\)
		sigquit	Interruption forte (ctrl-D)
	/*utiliser unlink pour heredoc ?*/

/!\ Objectif 13/12 (Mardi):
	-> Comprendre les signaux; debut
	-> Tester le fonctionnement d'Export et Unset; Fait
	-> Continuer cd et faire le changement de directory;
	-> voir pour l'execve(fork)(surement utile pour les signaux);
	-> chercher de la doc pour Makefile

/!\ Objectif 15/12 (Jeudi):
	->Finir cd: modification des valeurs de pwd et oldpwd;
		-> dernier cas a gerer: si un path est donner
	->Norminette a faire: cd: 2fonctions +25lignes,

/!\ Objectif 19/12 (Lundi):
	-> Finir cd (cd, cd /, cd path absolu) : Fait
	-> Avancer les signaux: impossibilité d'utiliser la fonction rl_replace_line()
	-> Faire la norminette: Fait (reste les WRONG_SCOPE_COMMENT)
	/!\ free le path pour cd: Fait

/!\ Objectif 20/12 :
	-> cd verifier quand cd /, puis cd Users/...; enlever le / : Fait
	-> signaux: reussir a utiliser rl_replace_line(): Fait
	->Continuer les signaux (sans la gestion des pipes, sans le fork) 
	//faire une fois les pipes et les fork fait

/!\ Objectif 26/12 :
	-> Fixer la gestion de la structure: Fait
	-> Corriger les leaks :
		export : leaks lors de l'ajout d'une variable dans export(tableau?)
		unset : 0 leaks pour le moment;
	-> Faire le fork execve; Fait (a tester pour tous les cas)
		*pb : fait 2 fois exit (parfois)

/!\ Objectif 27/12 :
	-> Faire les chevrons(utiliser dup), heredoc;
	-> Faire les pipes ();
	-> gerer les cotes(niveau du split);
	-> gerer le $?, gestion du $;
	-> finir les signaux(voir la fonction signal); fait
	-> verifier les leaks;
	-> voir pour changer l'environnement (OLDPWD absent au debut);

/!\ Pour lundi mettre en commun les idees de gestion des pipes (cmd multiple)

/!\ Fait aujourd'hui 09/01 (cassandra):
	-> norminette
	-> debut essai gestion des cotes :
		*reussir a copier et split correctement sur les espaces et des qu'il y a des cotes
		copier le contenu (sans split sur les espaces) et supprimer celle-ci lors de la copie
		ex : 'echo' devient echo ; "Hello World" devient Hello World

/!\ Mardi 10/01:
	-> recoder strcmp; fait
	-> voir la gestion des pipes; (schéma)

/!\ Mercredi 11/01:
	-> finir les signaux;
		->ctrl c fait; ctrl \ fait; ctrl d segfault quand line vide

/!\ Jeudi 12/01:
	-> finir ctrl-d quand il doit exit
		-> ne passe pas dans les fonctions signaux 
		-> ctrl-d est un EOF ? utiliser tgets ?
	-> Signaux fini! (a tester si fonctionne correctement avec heredoc)

Raph :
	-> gestion des cotes;
	-> decoupage de la ligne par groupe puis par commande;

si le $VAR est ente cotes ou double affiche la valeur de la var
sinon affiche juste le nom
pour le message d'erreur si dans le term ecrit ex: $COLORTERM
-> bash: truecolor: command not found (for for "$COLORTERM")
et '$COLORTERM' -> bash: $COLORTERM: command not found

si pipe sans rien affiche une erreur
si cmd pipe et rien le prog demande une deuxieme cmd
ex :
	bash-3.2$ cat test |
	> echo bonjour
	bonjour

heredoc :
bash-3.2$ cat << end
> $PWD
> END
> end
/Users/clecat/Desktop/Cursus/Minishell42
END
bash-3.2$ cat
$PWD
$PWD
"$PWD"
"$PWD"
^C
bash-3.2$

/!\ a regler lundi : cd ~/Desktop ne va pas au dossier; Fait

/!\Lundi 16/01:
	-> finir cd ~; fait
	-> faire fonction $; commencer seg fault pour la suite du parcours
	-> fixe exit : minishell> $PWD
				   minishell: $PWD: command not found
				   minishell> exit
				   exit
				   minishell> exit
				   exit	