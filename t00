	-> echo >>'>' test : OK mais affiche le printf dans le fichier aussi 
	->  cd $HOME/Documents ne prend le /Documents dans le chemin
		-> fonctionne mais mauvais pwd (minishell: /Users/clecat && bash: /Users/clecat/Documents)
	-> echo -n -n -nnnn -nnnnm Fonction echo
		-> -nnnn -nnnnm au lieu de -nnnnm
	-> cat /dev/random | head -n 1 | cat -e OK
	-> unset var1 # with undefined var1 OK
	-> export "" et unset "" et ajoute et; unset; dans export ajouter une verification dans export
		-> segfault au lieu de bash: export: `': not a valid identifier
								bash: export: `': not a valid identifier
	-> $ doit mettre command not found et ne le fait pas faire fonction de verification de la line
	-> not_cmd bonjour > salut fonctionne differement (minishell: creer le fichier et mets le message d'erreur dedans ;bash ne creer pas le fichier et met le message d'erreur)
	-> env puis export puis env # vars aren't sorted
		-> env # fonctionne mais pas dans notre minishell (sujet ne dis pas de gerer le #)
	-> cat Makefile | grep pr | head -n 5 | cd test OK mauvais ret_err (0 au lieu de 1)  ret_err pas changer car chils pas fini au moment de l'affichage de l'erreur du parent
	-> cat Makefile | grep pr | head -n 5 | cat test OK mais mauvais message d'erreur comme au dessus 
	-> cat Makefile | grep pr | head -n 5 | hello OK et mauvais ret_err (0 au lieu de 127)
	-> echo bonjour >>> test
		-> mauvais message d'erreur (minishell: unexpected error au lieu de bash: syntax error near unexpected token `>')
	-> echo bonjour > > out (fonctionne dans mnishell alors que et creer un fichier > dans bash: bash: syntax error near unexpected token `>') PARSING
	-> echo 2 >> out1 > out2 OK
	-> echo 2 > out1 >> out2 OK
	-> cat < test2(fichier non existant) OK mais cat boucle alors qu'il ne doit pas
	-> export var; export var=test (var var="test") ne change pas var Fonction export
	-> echo bonjour > $test segfault au lieu de bash: $test: ambiguous redirect
	-> exec.c (fichier dans le repo oÃ¹ l'on se trouve) OK
	-> cd ../../../../../.. puis pwd: seg fault ai lieu de fonction et pwd= / Probleme de cd a fix
	-> ctrl-C . 130 sur bin(ex : sleep 10)&line vide NON TESTER
 	-> ctrl-\ .131 sur bin NON TESTER
	-> /bin/echo bonjour (met command not found au lieu de faire echo bonjour)
	-> echo bonjour > $test w/ t (boucle)
	-> minishell # binary not in path without "./" before NON TESTER
	-> cat diufosgid (#) test avec et sans # : Fonctionnne correctement, bon ret_err, message d'erreur pour # 
	-> exit #
	-> exit -10 exit mais affiche message d'erreur, bash exit juste FONCTION exit 
	-> exit +10 meme comportement qu'au dessus Fonction exit
	-> ; minishell OK ret_err doit etre a 258
	-> echo "$HOME" pb malloc mais fonctionnait avant

Autre Test:
 echo hudifg d | | hugdfihd => bug bash: syntax error near unexpected token `|' PARSING
 echo '' => bug ('' non enlever dans minishell)
 echo "" => bug (pas de retour a la ligne)
 echo hi " ; " hihi => doit tout afficher comme un arg mais affiche que hi et a la meme comportement que echo -n
 cd .. => bug a la racine sinon OK
 export "HI =hi" => bug `HI =hi': not a valid identifier (verfier si espace present dans l'arg)
 /bin/ls => bug au niveau du execve
 # write something the press ctrl+c => bug ne dois pas ecrire ^C
 # write something then press ctrl+d
 # write something then press ctrl+\
 echo | => bug
 sort | ls # check output order => OK
 cat < > => bug bash: syntax error near unexpected token `>'
 cat < < => bug bash: syntax error near unexpected token `>'
 cat > > => bug bash: syntax error near unexpected token `>'
 exit 0 | exit 1 => bug print exit et ret_err a 0 au lieu de 1
 exit 1 | exit 0 => bug meme cas

