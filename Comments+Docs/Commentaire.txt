# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Commentaire.txt                                    :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: clecat <clecat@student.42.fr>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2022/10/24 13:45:49 by clecat            #+#    #+#              #
#    Updated: 2022/12/20 12:47:18 by clecat           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

Tuto Minishell : https://www.cs.purdue.edu/homes/grr/SystemsProgrammingBook/Book/Chapter5-WritingYourOwnShell.pdf

Répartition des taches + chose à régler :

*Pour le Makefile :
    ->si homebrew sur la session :
        *créer var LIBPATH et entrer le chemin de la librairie :
        ex : LIBPATH = ~/.brew/Cellar/readline/8.2.1/lib
        et dans $(NAME) : $(OBJ)
        $(CC) $(OBJ) $(CFLAGS) -lreadline -L $(LIBPATH) -o $(NAME)
    ->sinon :
        télécharger la librairie libreadline.a
        et dans $(NAME) : $(OBJ)
        $(CC) $(OBJ) $(CFLAGS) libreadline.a -lreadline -lncurses -o $(NAME)

*Faire le Parse : determiner si c'est une commande, un arguments, une variable d'environnament
    ->utiliser access pour verifier si une cmd existe; (pas possible)

*/ regarder chacun des cas (execve/ built-in / pipe / chevron / signaux)
built-in : echo (-n), cd, pwd, unset, env, export et exit

cd : gerer . ; .. ; et chemin donner
echo : Par exemple ci-dessous, la variable $PATH n’est pas “traduite” car elle est entourée de guillemets simples.
Si on utilise des guillemets doubles, le shell remplace la variable par sa valeur.
	c2r5p4% bash 
	bash-3.2$ echo '$PATH'
	$PATH
	bash-3.2$ echo "$PATH"
	/Users/clecat/.brew/bin:/Users/clecat/.brew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/munki
	bash-3.2$ 
	bash-3.2$ echo -n "$PATH"
	/Users/clecat/.brew/bin:/Users/clecat/.brew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/munkibash-3.2$ 
	l'option -n n'affiche pas la nouvelle ligne
	bash-3.2$ echo
	
	bash-3.2$ 

pwd : donne le chemin de l'endroit ou on se trouve

unset : supprime une variable ou une fonction 
    option (a ne pas faire) : -f supprime une fonction ; -v supprime une variable ;
    comportement bash : unset sans arguments donne juste une nouvelle ligne (prompt) et ne fais rien;
	doit prendre une variable d'environnement en arguments

env: sans option ni argument
	montre la liste des variables d'environnement du shell

export: sans option (a revoir)
	http://www.w3big.com/fr/linux/linux-comm-export.html#gsc.tab=0 

exit: sans option
	lors de l'exit du bash:
	bash-3.2$ exit
	exit
	c2r5p2%
	->ecrit une nouvelle ligne "exit" puis sort
	exit bonjour
	exit
	bash: exit: bonjour: numeric argument required
	//bash home pas celui de 42
	clecat@DESKTOP-158CID6:~/Minishell42$ exit 156
	exit
	clecat@DESKTOP-158CID6:~/Minishell42$ $?
	Command '156' not found, did you mean:
chevron > : 
	ex : ls > fichier
	si le fichier existe la sortie de ls est ecrit dans le fichier, si il n'existe pas le fichier est créer
	si le fichier contient deja quelque chose le contenu est remplacer

chevron >> : 
	même comportement que le > , sauf que si le fichier contient quelque chose il ecrit a la fin de fichier

chevron < :
	cmd < entrée de la commande arg
	grep < Makefile Minishell
	bash-3.2$ grep < Makefile minishell
	NAME = minishell
	bash-3.2$

chevron << : HEREDOC
	heredoc(fichier virtuel),
	bash-3.2$ grep << heredoc Minishell
	> Name = Minishell
	> Minishell
	> heredoc
	Name = Minishell
	Minishell
	bash-3.2$

/!\ Comprendre ce qu'est le lexer et comment le faire 

->chose possible a faire pour le moment :
	*echo
	*exit
	*creer la variable $? -> code de retour de la derniere fonction
	*pwd


Chose a faire aujourd'hui:
Si vous comptez Split vous allez devoir faire un split arrangé à votre sauce
En gros un split qui ne splittera pas lorsque les espaces seront entre des quotes
Par exemple
Mais c'est un peu compliqué à faire dans un premier temps si  t'es plus habituée
Pour ce qui est de mettre en place le reste du lexer, il faut que tu vois chacune des parties avant de les implémenter
Mais si vous comptez Split tu peux déjà mettre en place la fonction de redirection
Qui se basera sur le premier élément du split et regardera si c'est un des built-in (echo etc)

Encore une fois c'est ton lexer qui permettra que ça soit le premier élément de la liste s'il n'était pas censé l'être avec la ligne que t'as envoyé
Il faut aussi que vous sachiez comment gérer les pipés
Pipes, enfin comment vous comptez faire
Ya plusieurs options, c'est à vous de voir

Entraîne toi à créer un fichier
Dup2 la sortie standard
Et executer une fonction de base avec execve
(Dup2 la sortie standard par le fichier en question )
Normalement si tu sais faire ça tu réussiras à faire le reste, mais il faut voir quelle partie tu comptes coder
cette partie sert pour "lexer" la partie chevron / pour les pipes


/*Test2*/

bash-3.2$ grep > test2 < SRC/main.c "minishell"
bash-3.2$ cat test2
#include "minishell.h"
//grep >test < Makefile "minishell" | cat test.txt
                mini.line = readline("minishell>");
bash-3.2$ grep >> test2 < SRC/exit_pwd.c "pwd"
bash-3.2$ cat test2
#include "minishell.h"
//grep >test < Makefile "minishell" | cat test.txt
                mini.line = readline("minishell>");
/*   exit_pwd.c                                         :+:      :+:    :+:   */
//affiche le pwd
void    pwd(char **c_env)
bash-3.2$ 

/*test echo*/
//comportement a voir aussi
bash-3.2$ echo "bonjour | ls
> 
bash-3.2$ echo "bonjour | ls"
bonjour | ls
bash-3.2$ echo "
> 
bash-3.2$ bonjour
bash: bonjour: command not found
bash-3.2$ echo $bonjour

bash-3.2$ echo $"bonjour"
bonjour
bash-3.2$


/*Signaux*/
	*permet de reafficher correctement le prompt et ^C :
		-> mettre un printf("\n")avant pour afficher sur une nouvelle ligne a chaque fois
		rl_on_new_line();
		rl_replace_line("", 0);
		rl_redisplay();